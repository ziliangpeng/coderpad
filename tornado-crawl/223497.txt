<!DOCTYPE html>
<!-- CoderPad (c) 2013 Vincent Woo -->
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-2.newrelic.com","errorBeacon":"jserror.newrelic.com","licenseKey":"586aeabffa","applicationID":"2434573","transactionName":"cF5XTRNfXF9VQxkSVVdCFkoJX0c=","queueTime":16,"applicationTime":96,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-314.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function a(b,c,d){function e(f){if(!c[f]){var g=c[f]={exports:{}};b[f][0].call(g.exports,function(a){var c=b[f][1][a];return e(c?c:a)},g,g.exports,a,b,c,d)}return c[f].exports}for(var f=0;f<d.length;f++)e(d[f]);return e}({"4O2Y62":[function(a,b){function c(a,b){var c=d[a];return c?c.apply(this,b):(e[a]||(e[a]=[]),void e[a].push(b))}var d={},e={};b.exports=c,c.queues=e,c.handlers=d},{}],handle:[function(a,b){b.exports=a("4O2Y62")},{}],YLUGVp:[function(a,b){function c(){var a=m.info=NREUM.info;if(a&&a.agent&&a.licenseKey&&a.applicationID){m.proto="https"===l.split(":")[0]||a.sslForHttp?"https://":"http://",g("mark",["onload",f()]);var b=i.createElement("script");b.src=m.proto+a.agent,i.body.appendChild(b)}}function d(){"complete"===i.readyState&&e()}function e(){g("mark",["domContent",f()])}function f(){return(new Date).getTime()}var g=a("handle"),h=window,i=h.document,j="addEventListener",k="attachEvent",l=(""+location).split("?")[0],m=b.exports={offset:f(),origin:l};i[j]?(i[j]("DOMContentLoaded",e,!1),h[j]("load",c,!1)):(i[k]("onreadystatechange",d),h[k]("onload",c)),g("mark",["firstbyte",f()])},{handle:"4O2Y62"}],loader:[function(a,b){b.exports=a("YLUGVp")},{}]},{},["YLUGVp"]);</script>
  <meta name="description"
    content="CoderPad is the best tool available for conducting programming phone screen interviews. Edit code and run it with your candidate, realtime in the browser.">
  <link rel="shortcut icon" href="//d146h09pbg0b1a.cloudfront.net/assets/coderpad_logo_32x32-4cb7162b76ccaa9584b63b603f47e139.png">

  <title>CoderPad - Markdown</title>

  <link href="//fonts.googleapis.com/css?family=Bitter:400,700|Lato:300,700" media="all" rel="stylesheet" />
  <link href="//d146h09pbg0b1a.cloudfront.net/assets/application-c992391beaa069692384c4b76e08bd1b.css" media="all" rel="stylesheet" />
  
  
</head>
<body class="pad">

  
  

  
<div id="overlay">
  <div>
      <p>
        <span>Welcome to CoderPad!</span><br>
        Identify yourself below, if you please.
      </p>
      <input id="name-prompt">
      <button id="go" class="btn btn-primary">
        Go!
      </button>
  </div>
</div>

<div id="header">

  <div id="header-wrapper">


    <a
      id="settings-toggle"
      href="#"
      data-toggle="modal"
      data-target="#settings-modal"
    >
      <span
        class="fui-gear tooltip-target"
        data-toggle="tooltip"
        data-placement="bottom"
        title="Pad settings"
      ></span>
    </a>

  </div>
</div>

<div id="workspace-wrap" class="pad">
  <div id="workspace" class="markdown">
    <div id="editor" class="pane">
      <span class="pane-label">Markdown Code</span>
      <div id="editor-widget" class="codemirror-container"></div>
    </div>
    <div id="vertical" class="resizer"></div>
    <div id="right-pane">
        <div id="console-wrap" class="pane full">
          <span class="pane-label">Document</span>
        </div>
    </div>
  </div>
</div>

<div id="sidebar">
    <img alt="E6451db0fef4d8073c72149f202ab28f" id="branded_logo" src="//d2t1avzf848e2j.cloudfront.net/uploads/domain/logo/e6451db0fef4d8073c72149f202ab28f.png" />
  <ol id="users"></ol>

  <p>
    CoderPad is a collaborative code editor with real-time execution
     built straight into the browser.
  </p>
    <p><a href="https://plus.google.com/hangouts/_?gid=583721984460&amp;gd=https%3A%2F%2Fcoderpad.io%2F223497">Open Google Hangout</a></p>
  </p>
</div>




<script>
  window.lang     = 'markdown';
  window.pad      = '223497';
  window.username = null ||
    ('Guest ' + Math.floor(Math.random() * 1000));
  window.snippets = {"Fuzzy Address Similarity Improvement -- Java":"/*\r\nFuzzy Address Similarity:\r\n\r\nInput:\r\n  Two strings, each representing a street address in the US\r\nOutput:\r\n  A double\r\nOur goal is to take two address strings (corresponding to places in the US) and return a similarity score between 0 and 1. Our aim is for this similarity to be a semantic similarity indicating how likely the addresses are to represent the same business.\r\n\r\nAs an example of this, you should aim to give the pair \r\n    \"710 Mission St., San Francisco, CA\"\r\n    \"710 Mission Street, San Francisco, CA\"\r\na higher score than the pair \r\n    \"710 Mission St, San Francisco, CA\"\r\n    \"715 Mission St, San Francisco, CA\"\r\neven though the latter pair shares more characters.\r\n\r\n\r\nFormat:\r\n  Assume you have a comma delimited address consisting of:\r\n    STREET INFO, CITY INFO, STATE INFO\r\n    \"710 Mission St, San Francisco, CA\"\r\n    \"2051 Van Ness Avenue, San Francisco, CA\"\r\n    \"1333 Hostetter Rd, San Jose, CA\"\r\n    \r\n  Assume that the street info always has this form:\r\n    # STREET NAME SUFFIX\r\n  Assume city and state are standardized\r\n  DO NOT assume that the suffix of streets are standardized\r\n  \r\n  \r\nImprovements:\r\n  Algorithm\r\n  Comments\r\n  Variables\r\n  Methods\r\n  Testing\r\n  ...\r\n*/\r\n\r\nclass Solution {\r\n\r\n  public static double sim(String a1, String a2) {\r\n    double s = 0.0;\r\n    if(a1.equals(a2))\r\n      return 1.0;\r\n    \r\n    String[] addr1 = a1.split(\",\");\r\n    String[] addr2 = a2.split(\",\");\r\n    double extra = 0.0;\r\n    if(addr1[1] == addr2[1]) {\r\n      if(addr1[2] == addr2[2])\r\n        extra = 0.5;\r\n      else\r\n        extra = 0.3;\r\n    }\r\n    else\r\n      extra = 0.0;\r\n    \r\n    s += extra;\r\n    \r\n    // Now do the street address matching\r\n    String[] street1 = addr1[0].split(\" \");\r\n    String[] street2 = addr2[0].split(\" \");\r\n    int index = 0;\r\n    int matching_count = 0;\r\n    for(String word: street1) {\r\n      String other_word = street2[index];\r\n      if(word.equals(other_word))\r\n        matching_count += 1;\r\n      if(bothAreStreet(word, other_word))\r\n        matching_count += 1;\r\n      index = index + 1;\r\n    }\r\n   \r\n    if(matching_count \u003E 2)\r\n      s += 0.5;\r\n    else if(matching_count == 1)\r\n      s += 0.25;\r\n    return s;\r\n  }\r\n  \r\n  public static boolean bothAreStreet(String a, String b) {\r\n    if(a.equals(\"St.\") \u0026\u0026 b.equals(\"Street\"))\r\n        return true;\r\n    if(b.equals(\"St.\") \u0026\u0026 a.equals(\"Street\"))\r\n        return true;\r\n    return false;\r\n  }\r\n  \r\n  public static void main(String[] args) {\r\n    String addr1 = \"710 Mission Street, San Francisco, CA\";\r\n    String addr2 = \"707 Mission St, San Francisco, CA\";\r\n    double ret = sim(addr1, addr2);\r\n    assert ret \u003E 0.0;\r\n    System.out.println(ret);\r\n  }\r\n}","Fuzzy Address Similarity Improvement -- Python":"\"\"\"\r\nFuzzy Address Similarity:\r\n\r\nInput:\r\n  Two strings, each representing a street address in the US\r\nOutput:\r\n  A float between [0,1], representing the similarity of the two strings.\r\n  \r\nOur goal is to take two address strings (corresponding to places in the US) and return a similarity score between 0 and 1. Our aim is for this similarity to be a semantic similarity indicating how likely the addresses are to represent the same business.\r\n\r\nAs an example of this, you should aim to give the pair \r\n    \"710 Mission St., San Francisco, CA\"\r\n    \"710 Mission Street, San Francisco, CA\"\r\na higher score than the pair \r\n    \"710 Mission St, San Francisco, CA\"\r\n    \"715 Mission St, San Francisco, CA\"\r\neven though the latter pair shares more characters.\r\n\r\n\r\nFormat:\r\n   Assume you have a comma delimited address consisting of exactly three fields:\r\n    STREET INFO, CITY INFO, STATE INFO\r\n    \"710 Mission St, San Francisco, CA\"\r\n    \"2051 Van Ness Avenue, San Francisco, CA\"\r\n    \"1333 Hostetter Rd, San Jose, CA\"\r\n    \r\n  Assume that the street info always has this form:\r\n    # STREET NAME SUFFIX\r\n  Assume city and state are standardized\r\n  DO NOT assume that the suffix of streets are standardized\r\n  \r\n  \r\nImprovements:\r\n  Algorithm\r\n  Comments\r\n  Variables\r\n  Methods\r\n  Testing\r\n  ...\r\n\r\n\"\"\"\r\n\r\ndef both_are_street(a, b):\r\n    if a == \"St.\" and b == \"Street\":\r\n        return True\r\n    if b == \"St\" and a == \"Street\":\r\n        return True\r\n    return False\r\n\r\n\r\ndef sim(a1, a2):\r\n    \"\"\"Get similarity score.\"\"\"\r\n    s = 0.0\r\n    if a1 == a2:\r\n      s = 1.0\r\n    \r\n    addr1 = a1.split(',')\r\n    addr2 = a2.split(',')\r\n    \r\n    street1 = addr1[0].split()\r\n    street2 = addr2[0].split()\r\n    index = 0\r\n    matching_count = 0.0\r\n    for word in street1:\r\n      other_word = street2[index]\r\n      if word == other_word:\r\n        matching_count += 1\r\n      if both_are_street(word, other_word):\r\n        matching_count += 1\r\n      index = index + 1\r\n    \r\n    if matching_count \u003E= 2:\r\n      s += 0.5\r\n    elif matching_count == 1:\r\n      s += 0.25\r\n    return s\r\n\r\ndef run_tests():\r\n  score = sim(\r\n    '710 Mission Street, San Francisco, CA',\r\n    '707 Mission St, San Francisco, CA'\r\n  )\r\n  print \"Score: %f\" % score\r\n  assert score \u003E= 0\r\n    \r\nif __name__ == '__main__':\r\n  run_tests()","Lunch Recommendation":"Lunch Recommendation\r\n===================\r\n\r\nOur mobile apps as of Summer 2013 have a nearby recommendation feature where they attempt to find you interesting businesses relevant to you.\r\n\r\nIf you open the app around lunch you'll get recommendations for places to eat lunch around you.\r\n\r\nGoal: how would you implement something like this? (find good *lunch* restaurants nearby a user)\r\n\r\nInput:\r\n- user location (longitude, latitude)\r\n- user history (check ins, search history, profile text, etc.)\r\n\r\nGuiding Question:\r\n- Don't want to show dessert places (not good for lunch)\r\n- We show you things that are good but sufficiently close\r\n- Also make sure the business is not closed\r\n- ....\r\n\r\n","isPalindrome":"\"\"\"\r\nPalindrome:\r\n\r\n  A palindrome is a string that reads the same forward and backward.\r\n  \r\n  is_palindrome(\"\") -\u003E True\r\n  is_palindrome(\"a\") -\u003E True\r\n  is_palindrome(\"aba\") -\u003E True\r\n  is_palindrome(\"abba\") -\u003E True\r\n  is_palindrome(\"abab\") -\u003E False\r\n  is_palindrome(\"abc\") -\u003E False\r\n  \r\n  is_palindrome(\"Bob\") -\u003E True\r\n  is_palindrome(\"Cab\") -\u003E False\r\n  \r\n  is_palindrome(\"A man, a plan, a canal -- Panama!\") -\u003E True\r\n  \r\n\"\"\"\r\n\r\n\r\ndef is_palindrome(string):\r\n  \"\"\"A bad first attempt....\"\"\"\r\n  return True\r\n\r\n  \r\ndef simple_test():\r\n    s = \"aba\"\r\n    result = is_palindrome(s)\r\n    print 'Input: %s' % s\r\n    print 'Result: %s' % result\r\n    assert result is True\r\n    \r\n    s = \"abb\"\r\n    result = is_palindrome(s)\r\n    print 'Input: %s' % s\r\n    print 'Result: %s' % result\r\n    assert result is False\r\n  \r\nif __name__ == '__main__':\r\n    simple_test()","Fuzzy Address Similarity":"\"\"\"\r\nFuzzy Address Similarity:\r\n\r\nOur goal is to take two address strings (corresponding to places in the US) and return a similarity score between 0 and 1.\r\n\r\nOur use of this method will be matching businesses from two separate databases, so you should aim to give a good score to address pairs you think are meant to correspond to the same place, and poor scores to pairs that correspond to different businesses.\r\n\r\nAs an example of this, you might aim to give the pair \"710 Mission St\" and \"710 Mission Street\" a higher score than the pair \"710 Mission St\" and \"715 Mission St\", even though the latter pair shares more characters.\r\n\r\n\r\nFormat:\r\n  Assume you have a comma delimited address consisting of:\r\n    STREET INFO, CITY INFO, STATE INFO\r\n    \"710 Mission St, San Francisco, CA\"\r\n    \"2051 Van Ness Avenue, San Francisco, CA\"\r\n    \"1333 Hostetter Rd, San Jose, CA\"\r\n    \r\n  Assume that the street info always has this form:\r\n    # STREET NAME SUFFIX\r\n  Assume city and state are standardized\r\n  DO NOT assume that the suffix of streets are standardized\r\n\"\"\"\r\n\r\n\r\ndef address_similarity(addr1, addr2):\r\n    \"\"\"Take in two addresses and return a similarity score in [0,1].\"\"\"\r\n    if addr1 == addr2:\r\n      return 1.0\r\n    return 0.0\r\n\r\n# Some examples\r\nif __name__ == '__main__':\r\n  # Pretty similar, should get a high (but not perfect) score\r\n  addr1 = '710 Mission Street, San Francisco, CA'\r\n  addr2 = '707 Mission St, San Francisco, CA'\r\n\r\n  print address_similarity(addr1, addr2)","Vegetarian classifier evaluation":"Classifier Evaluation without labels\r\n======================================\r\n\r\nProblem Statement:\r\n\r\nWe want to show vegetarian users appropriate yelp businesses (no steakhouses) and non-vegetarians fewer veg businesses (less tofu).\r\n\r\nOur approach:\r\n\r\nAn engineer built a hand-tuned binary classifier that takes in a user and returns vegetarian/non-vegetarian. He tested it on a few teammates and it seemed to work correctly. We'd like to confirm that it works well on a larger dataset before deploying it to production.\r\n\r\nYour challenge:\r\n\r\nWe don't have any large set of labeled user data. In fact we don't have any labeled data off hand. How would you go about deciding whether this classifier is good enough for production?\r\n\r\nQuestions to ponder:\r\n- How can we generate reliable labels for our data?\r\n- Can we validate the classifier without any labeled data?\r\n- Is there a way to build an entirely new classifier in a principled way (no hand-tuning) without a large gold dataset?"}
</script>
<script src="https://cdn.firebase.com/v0/firebase.js"></script>


  
  
<div class="modal fade" id="switching-language-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <p>The pad's language is switching to: <span></span>&hellip;</p>
  <p>Everyone&rsquo;s tabs will refresh shortly.</p>

    </div>
  </div>
</div>


<div class="modal fade" id="settings-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <h3><span class="fui-gear"></span>Pad Settings</h3>
  <ul>
    <li>
      <h4>Language</h4>
      <p>Warning: Changing the pad language will refresh the window for all participants.</p>
      <select class="selectpicker" id="language-select" name="language-select"><option value="c">C</option>
<option value="csharp">C#</option>
<option value="cpp">C++</option>
<option value="clojure">Clojure</option>
<option value="coffeescript">CoffeeScript</option>
<option value="go">Go</option>
<option value="haskell">Haskell</option>
<option value="java">Java</option>
<option value="javascript">JavaScript</option>
<option selected="selected" value="markdown">Markdown</option>
<option value="objc">Objective-C</option>
<option value="php">PHP</option>
<option value="perl">Perl</option>
<option value="python">Python</option>
<option value="ruby">Ruby</option>
<option value="scala">Scala</option></select>
    </li>
    <li>
      <h4>Tab &nbsp;Spacing</h4>
      <p>Control the number of spaces used for indentation.</p>
      <select class="selectpicker" id="tab-type-select" name="tab-type-select"><option selected="selected" value="2">2 Space Tabs</option>
<option value="4">4 Space Tabs</option>
<option value="8">8 Space Tabs</option></select>
    </li>
  </ul>

    </div>
  </div>
</div>


<div class="modal fade" id="create-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
    <div class="modal-body clearfix">
      <h4>Choose the language for your new pad:</h4>

      <form accept-charset="UTF-8" action="/" class="new_pad" id="new_pad" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
        <div class="clearfix">
            <ul>
              <li class="header">Interpreted</li>
                <li>
                  <input id="pad_language_coffeescript" name="pad[language]" type="radio" value="coffeescript" />
                  <label for="pad_language_coffeescript">CoffeeScript</label>
                </li>
                <li>
                  <input id="pad_language_javascript" name="pad[language]" type="radio" value="javascript" />
                  <label for="pad_language_javascript">JavaScript</label>
                </li>
                <li>
                  <input id="pad_language_perl" name="pad[language]" type="radio" value="perl" />
                  <label for="pad_language_perl">Perl</label>
                </li>
                <li>
                  <input id="pad_language_php" name="pad[language]" type="radio" value="php" />
                  <label for="pad_language_php">PHP</label>
                </li>
                <li>
                  <input id="pad_language_python" name="pad[language]" type="radio" value="python" />
                  <label for="pad_language_python">Python</label>
                </li>
                <li>
                  <input checked="checked" id="pad_language_ruby" name="pad[language]" type="radio" value="ruby" />
                  <label for="pad_language_ruby">Ruby</label>
                </li>
            </ul>
            <ul>
              <li class="header">Compiled</li>
                <li>
                  <input id="pad_language_c" name="pad[language]" type="radio" value="c" />
                  <label for="pad_language_c">C</label>
                </li>
                <li>
                  <input id="pad_language_clojure" name="pad[language]" type="radio" value="clojure" />
                  <label for="pad_language_clojure">Clojure</label>
                </li>
                <li>
                  <input id="pad_language_cpp" name="pad[language]" type="radio" value="cpp" />
                  <label for="pad_language_cpp">C++</label>
                </li>
                <li>
                  <input id="pad_language_csharp" name="pad[language]" type="radio" value="csharp" />
                  <label for="pad_language_csharp">C#</label>
                </li>
                <li>
                  <input id="pad_language_go" name="pad[language]" type="radio" value="go" />
                  <label for="pad_language_go">Go</label>
                </li>
                <li>
                  <input id="pad_language_haskell" name="pad[language]" type="radio" value="haskell" />
                  <label for="pad_language_haskell">Haskell</label>
                </li>
                <li>
                  <input id="pad_language_java" name="pad[language]" type="radio" value="java" />
                  <label for="pad_language_java">Java</label>
                </li>
                <li>
                  <input id="pad_language_objc" name="pad[language]" type="radio" value="objc" />
                  <label for="pad_language_objc">Objective-C</label>
                </li>
                <li>
                  <input id="pad_language_scala" name="pad[language]" type="radio" value="scala" />
                  <label for="pad_language_scala">Scala</label>
                </li>
            </ul>
            <ul>
              <li class="header">Documents</li>
                <li>
                  <input id="pad_language_markdown" name="pad[language]" type="radio" value="markdown" />
                  <label for="pad_language_markdown">Markdown</label>
                </li>
            </ul>
        </div>
        <p>
          <input class="btn btn-primary" name="commit" type="submit" value="Create Pad" /> or
          <input class="btn btn-primary" name="commit" type="submit" value="Launch Google Hangout" />
        </p>
</form>    </div>

    </div>
  </div>
</div>



  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
    <script src="//cdn.ravenjs.com/1.1.2/jquery,native/raven.min.js"></script>
    <script>
      Raven.config('https://4d747205c6ed435c889710eaead44e12@app.getsentry.com/10579', {
        includePaths: [
          /localhost/,
          /coderpad\.io/,
          /vincentwoo\.com/,
          /d146h09pbg0b1a\.cloudfront/
        ],
        ignoreUrls: [
          /graph\.facebook\.com/i,
          /connect\.facebook\.net\/en_US\/all\.js/i,
          /eatdifferent\.com\.woopra-ns\.com/i,
          /static\.woopra\.com\/js\/woopra\.js/i,
          /extensions\//i,
          /^chrome:\/\//i,
          /127\.0\.0\.1:4001\/isrunning/i,
          /webappstoolbarba\.texthelp\.com\//i,
          /metrics\.itunes\.apple\.com\.edgesuite\.net\//i
        ]
      }).install();
    </script>
  <script src="//d146h09pbg0b1a.cloudfront.net/assets/application-ac1fc5b18aff7c11b7c357930bb008e9.js"></script>
</body>
</html>
