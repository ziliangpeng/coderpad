<!DOCTYPE html>
<!-- CoderPad (c) 2013 Vincent Woo -->
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-2.newrelic.com","errorBeacon":"jserror.newrelic.com","licenseKey":"586aeabffa","applicationID":"2434573","transactionName":"cF5XTRNfXF9VQxkSVVdCFkoJX0c=","queueTime":5,"applicationTime":81,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-314.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function a(b,c,d){function e(f){if(!c[f]){var g=c[f]={exports:{}};b[f][0].call(g.exports,function(a){var c=b[f][1][a];return e(c?c:a)},g,g.exports,a,b,c,d)}return c[f].exports}for(var f=0;f<d.length;f++)e(d[f]);return e}({"4O2Y62":[function(a,b){function c(a,b){var c=d[a];return c?c.apply(this,b):(e[a]||(e[a]=[]),void e[a].push(b))}var d={},e={};b.exports=c,c.queues=e,c.handlers=d},{}],handle:[function(a,b){b.exports=a("4O2Y62")},{}],YLUGVp:[function(a,b){function c(){var a=m.info=NREUM.info;if(a&&a.agent&&a.licenseKey&&a.applicationID){m.proto="https"===l.split(":")[0]||a.sslForHttp?"https://":"http://",g("mark",["onload",f()]);var b=i.createElement("script");b.src=m.proto+a.agent,i.body.appendChild(b)}}function d(){"complete"===i.readyState&&e()}function e(){g("mark",["domContent",f()])}function f(){return(new Date).getTime()}var g=a("handle"),h=window,i=h.document,j="addEventListener",k="attachEvent",l=(""+location).split("?")[0],m=b.exports={offset:f(),origin:l};i[j]?(i[j]("DOMContentLoaded",e,!1),h[j]("load",c,!1)):(i[k]("onreadystatechange",d),h[k]("onload",c)),g("mark",["firstbyte",f()])},{handle:"4O2Y62"}],loader:[function(a,b){b.exports=a("YLUGVp")},{}]},{},["YLUGVp"]);</script>
  <meta name="description"
    content="CoderPad is the best tool available for conducting programming phone screen interviews. Edit code and run it with your candidate, realtime in the browser.">
  <link rel="shortcut icon" href="//d146h09pbg0b1a.cloudfront.net/assets/coderpad_logo_32x32-4cb7162b76ccaa9584b63b603f47e139.png">

  <title>CoderPad - Java</title>

  <link href="//fonts.googleapis.com/css?family=Bitter:400,700|Lato:300,700" media="all" rel="stylesheet" />
  <link href="//d146h09pbg0b1a.cloudfront.net/assets/application-c992391beaa069692384c4b76e08bd1b.css" media="all" rel="stylesheet" />
  
  
</head>
<body class="pad">

  
  

  
<div id="overlay">
  <div>
      <p>
        <span>Welcome to CoderPad!</span><br>
        Identify yourself below, if you please.
      </p>
      <input id="name-prompt">
      <button id="go" class="btn btn-primary">
        Go!
      </button>
  </div>
</div>

<div id="header">

  <div id="header-wrapper">
      <button
        class="btn btn-primary tooltip-target"
        id="run"
        data-toggle="tooltip"
        title="Shortcut: ctrl + enter"
        data-placement="bottom"
        data-html="true"
      >
        Run
        <span class="fui-play"></span>
      </button>


    <a
      id="settings-toggle"
      href="#"
      data-toggle="modal"
      data-target="#settings-modal"
    >
      <span
        class="fui-gear tooltip-target"
        data-toggle="tooltip"
        data-placement="bottom"
        title="Pad settings"
      ></span>
    </a>

  </div>
</div>

<div id="workspace-wrap" class="pad">
  <div id="workspace" class="java">
    <div id="editor" class="pane">
      <span class="pane-label">Java Code</span>
      <div id="editor-widget" class="codemirror-container"></div>
    </div>
    <div id="vertical" class="resizer"></div>
    <div id="right-pane">
        <div id="execution-log" class="pane full">
          <span class="pane-label">Results</span>
        </div>
    </div>
  </div>
</div>

<div id="sidebar">
    <img alt="5dde501906b4898b284e8bde7b2bbd76" id="branded_logo" src="//d2t1avzf848e2j.cloudfront.net/uploads/domain/logo/5dde501906b4898b284e8bde7b2bbd76.png" />
  <ol id="users"></ol>

  <p>
    CoderPad is a collaborative code editor with real-time execution
     built straight into the browser.
  </p>
    <p><a href="https://plus.google.com/hangouts/_?gid=583721984460&amp;gd=https%3A%2F%2Fcoderpad.io%2F944236">Open Google Hangout</a></p>
  </p>
</div>




<script>
  window.lang     = 'java';
  window.pad      = '944236';
  window.username = null ||
    ('Guest ' + Math.floor(Math.random() * 1000));
  window.snippets = {"Alex Kaiser":"/*\r\nImplement a Utf8 validator.\r\n\r\n- variable multibyte char encoding, each utf8 character may be encoded as one or more bytes\r\n- leading byte indicates total number of bytes in the utf8 character - (1-8)\r\n- each utf8 character MUST start with a leading byte (not a continuation byte)\r\n- each leading byte MUST be followed by the exact number of continuation bytes\r\n- x's contain the encoded character data. We don't care about them for this exercise.\r\n\r\nBit representations:\r\n\r\nleading, 1 byte   = 0xxxxxxx\r\ncontinuation byte = 10xxxxxx\r\nleading, 2 bytes  = 110xxxxx\r\nleading, 3 bytes  = 1110xxxx\r\nleading, 4 bytes  = 11110xxx\r\nleading, 5 bytes  = 111110xx\r\nleading, 6 bytes  = 1111110x\r\nleading, 7 bytes  = 11111110\r\nleading, 8 bytes  = 11111111\r\n\r\nExamples:\r\n\r\nHI!\r\n  \r\n1 byte character: 0xxxxxxx\r\n2 byte character: 110xxxxx 10xxxxxx\r\n3 byte character: 1110xxxx 10xxxxxx 10xxxxxx\r\n*/\r\n\r\n#include \u003Cstdio.h\u003E\r\n\r\ntypedef unsigned char bool;\r\n#define true 1\r\n#define false 0\r\n\r\nbool leadingByte(unsigned char aByte);\r\nbool isSet(unsigned char aByte, int index);\r\nint get_number_continuation_bytes(unsigned char aByte);\r\n\r\nbool validate_utf8_string(unsigned char* bytes, int count) {\r\n  int index = 0;\r\n  bool next_byte_leading = true;\r\n  int number_of_continuation_bytes = 0;\r\n  while (index \u003C count) {\r\n    if (next_byte_leading) {\r\n      if (leadingByte(bytes[index])) {\r\n        if (isSet(bytes[index], 0)) {\r\n          number_of_continuation_bytes = get_number_continuation_bytes(bytes[index]);\r\n          next_byte_leading = false;\r\n        }\r\n      } else {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (leadingByte(bytes[index])) {\r\n        return false;\r\n      } else {\r\n        number_of_continuation_bytes--;\r\n        if (number_of_continuation_bytes == 0) {\r\n          next_byte_leading = true;\r\n        }\r\n      }\r\n    }\r\n    index++;\r\n  }\r\n  if (number_of_continuation_bytes != 0) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nint get_number_continuation_bytes(unsigned char aByte) {\r\n  int number_of_continuation_bytes = 0;\r\n  while (isSet(aByte, number_of_continuation_bytes)) {\r\n    number_of_continuation_bytes++;\r\n  }\r\n  return number_of_continuation_bytes-1;\r\n}\r\n\r\nbool leadingByte(unsigned char aByte) {\r\n  return !(isSet(aByte, 0) \u0026\u0026 !isSet(aByte, 1));\r\n}\r\n\r\nbool isSet(unsigned char aByte, int index) {  \r\n  return (aByte \u003E\u003E (7-index)) \u0026 00000001;\r\n}\r\n\r\nint main() {\r\n  unsigned char bytes[] = { 0x0 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes, 1));\r\n//   printf(\"%d\\n\", isSet(0x0, 1));\r\n//   printf(\"%d\\n\", isSet(0x01, 7));  // 00000001 \r\n//   printf(\"%d\\n\", isSet(0x80, 0));  // 10000000\r\n//   printf(\"%d\\n\", leadingByte(0x0));\r\n//   printf(\"%d\\n\", get_number_continuation_bytes( 0xC0 ));\r\n  \r\n  // 2 byte character: 110xxxxx 10xxxxxx\r\n  unsigned char bytes2[] = { 0xC0, 0x80 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes2, 2));\r\n  \r\n//   3 byte character: 1110xxxx 10xxxxxx 10xxxxxx\r\n  unsigned char bytes3[] = { 0xE0, 0x80, 0x80 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes3, 3));\r\n  \r\n  unsigned char bytes6[] = { 0xE0, 0x80, 0x80, 0xC0, 0x80, 0x0 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes6, 6));\r\n  \r\n  unsigned char bytes4[] = { 0xE0, 0x80 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes4, 2));\r\n  \r\n  unsigned char bytes5[] = { 0xE0, 0x80, 0x80, 0x80 };\r\n  printf(\"%d\\n\", validate_utf8_string(bytes5, 4));\r\n  \r\n  return 0;  \r\n}\r\n\r\n","Aniruddh Chaturvedi":"/*\r\nImplement a Utf8 validator.\r\n\r\n- variable multibyte char encoding, each utf8 character may be encoded as one or more bytes\r\n- leading byte indicates total number of bytes in the utf8 character - (1-8)\r\n- each utf8 character MUST start with a leading byte (not a continuation byte)\r\n- each leading byte MUST be followed by the exact number of continuation bytes\r\n- x's contain the encoded character data. We don't care about them for this exercise.\r\n\r\nBit representations:\r\n\r\nleading, 1 byte   = 0xxxxxxx\r\ncontinuation byte = 10xxxxxx\r\nleading, 2 bytes  = 110xxxxx\r\nleading, 3 bytes  = 1110xxxx\r\nleading, 4 bytes  = 11110xxx\r\nleading, 5 bytes  = 111110xx\r\nleading, 6 bytes  = 1111110x\r\nleading, 7 bytes  = 11111110\r\nleading, 8 bytes  = 11111111\r\n\r\nExamples:\r\n\r\n0xxxxxxx 110xxxxx 10xxxxxx 1110xxxx 10xxxxxx 10xxxxxx\r\n\r\n1 byte character: 0xxxxxxx\r\n2 byte character: 110xxxxx 10xxxxxx\r\n3 byte character: 1110xxxx 10xxxxxx 10xxxxxx\r\n*/\r\n\r\npublic class Solution {\r\n  \r\n  public static String toBinStr(int i) {\r\n    return Integer.toBinaryString(i);\r\n  }\r\n\r\n  public static boolean isContinuationByte(byte b) {\r\n    return (b \u0026 0b11000000) == 0b10000000;\r\n  }\r\n  \r\n  public static boolean isValid(byte[] bytes){\r\n    int i = 0;\r\n    System.out.println(\"bytes length is \" + bytes.length);\r\n    while (i \u003C bytes.length) {\r\n      \r\n      if (isContinuationByte(bytes[i])) {\r\n        return false;\r\n      }\r\n     \r\n      int n = getNumLeadingBits(bytes[i]);\r\n      i += 1;\r\n      //number of bytes that are continuation bytes == numleadingbits\r\n      for(int j = 0; j \u003C n - 1; j++){\r\n        if(!isContinuationByte(bytes[i+j])){\r\n          return false;\r\n        }\r\n        i+=1;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  public static int getNumLeadingBits(byte b) {\r\n    int num = 0;\r\n    for(int i = 7; i \u003E= 0; i--){\r\n      int bit = (b \u0026 (1 \u003C\u003C i)) \u003E\u003E i;      \r\n      if(bit == 1){\r\n        num ++;\r\n      }\r\n      else{\r\n        break;\r\n      }\r\n    }\r\n    return num;\r\n  }\r\n  \r\n  public static void main(String[] args) {\r\n    assert isValid(new byte[] {0b01111111});\r\n    assert !isValid(new byte[] {(byte)0b01001101, (byte)0b10001000} );\r\n    assert isValid(new byte[] {(byte)0b11011111, (byte)0b10111111} );\r\n    assert isValid(new byte[] {(byte)0b11011111, (byte)0b10101010} );\r\n    assert !isValid(new byte[] {(byte)0b11011111, (byte)0b10111111, (byte)0b10101010} );\r\n    assert !isValid(new byte[] {(byte)0b11011111, (byte)0b11111111} );\r\n    assert !isValid(new byte[] {(byte)0b11011111, (byte)0b11111111});\r\n    \r\n    \r\n    System.out.println(\"success\");\r\n    \r\n    \r\n  }\r\n} ","francois.rousseau":"/*\r\nImplement a Utf8 validator.\r\n\r\n- variable multibyte char encoding, each utf8 character may be encoded as one or more bytes\r\n- leading byte indicates total number of bytes in the utf8 character - (1-8)\r\n- each utf8 character MUST start with a leading byte (not a continuation byte)\r\n- each leading byte MUST be followed by the exact number of continuation bytes\r\n- x's contain the encoded character data. We don't care about them for this exercise.\r\n\r\nBit representations:\r\n\r\nleading, 1 byte   = 0xxxxxxx\r\ncontinuation byte = 10xxxxxx\r\nleading, 2 bytes  = 110xxxxx\r\nleading, 3 bytes  = 1110xxxx\r\nleading, 4 bytes  = 11110xxx\r\nleading, 5 bytes  = 111110xx\r\nleading, 6 bytes  = 1111110x\r\nleading, 7 bytes  = 11111110\r\nleading, 8 bytes  = 11111111\r\n\r\nExamples:\r\n\r\n0xxxxxxx 110xxxxx 10xxxxxx 1110xxxx 10xxxxxx 10xxxxxx\r\n\r\n0xxxxxxx 110xxxxx 10xxxxxx 1110xxxx 10xxxxxx l = 2\r\n\r\n\r\n1 byte character: 0xxxxxxx\r\n2 byte character: 110xxxxx 10xxxxxx\r\n3 byte character: 1110xxxx 10xxxxxx 10xxxxxx\r\n*/\r\n\r\npublic class Solution {\r\n  private static int[] howMany = new int[256];\r\n  static {\r\n    fill();\r\n  }\r\n  \r\n  public boolean isValid(byte[] bytes) {\r\n    int i = 0;\r\n    while(i \u003C bytes.length) {\r\n      byte current = bytes[i];\r\n      int howMany = howMany(current);\r\n      if(howMany == 0) {\r\n        i++;\r\n        continue;\r\n      } else if(howMany == 1) {  // continuation byte\r\n        return false;\r\n      } else {\r\n        boolean result = isValid(bytes, i + 1, howMany - 1);\r\n        if(result == false) {\r\n          return false;\r\n        }\r\n        i += howMany;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  private boolean isValid(byte[] bytes, int i, int l) {\r\n    if(i + l \u003E bytes.length) {\r\n      return false;\r\n    }\r\n    for(int k = i; k \u003C= i + l; i++) {\r\n      if(howMany(bytes[k]) != 1) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  private int howMany(byte b) {\r\n    return howMany[b \u0026 0xFF];\r\n  }\r\n  \r\n  private static int howMany2(byte b) {\r\n    for(int k = 7; k \u003E= 0; k--) {  // from left to right\r\n      if(((b \u003E\u003E k) \u0026 1) == 0) {     // first 0\r\n        return 7 - k;\r\n      }\r\n    }\r\n    return 8;\r\n  }\r\n\r\n  private static void fill() {\r\n    for(int i = 0; i \u003C 256; i++) {\r\n      howMany[i] = howMany2((byte)i);\r\n    }\r\n  }\r\n  \r\n  \r\n  public static void main(String[] args) {\r\n    Solution so = new Solution();\r\n    assert so.isValid(new byte[]{((byte)0b00100000)});\r\n    assert !so.isValid(new byte[]{((byte)0b10100000)});\r\n    assert so.isValid(new byte[]{((byte)0b00100000)});\r\n    assert so.isValid(new byte[]{((byte)0b11010000), ((byte)0b10100000)});\r\n    assert so.isValid(new byte[]{((byte)0b00100000), ((byte)0b11010000), ((byte)0b10100000)});\r\n    assert so.isValid(new byte[]{((byte)0b00100000), ((byte)0b11010000), ((byte)0b10100000), ((byte)0b11100000) ,((byte)0b10100000), ((byte)0b10100000)});\r\n    System.out.println(\"done\");\r\n  }\r\n}\r\n"}
</script>
<script src="https://cdn.firebase.com/v0/firebase.js"></script>


  
  
<div class="modal fade" id="switching-language-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <p>The pad's language is switching to: <span></span>&hellip;</p>
  <p>Everyone&rsquo;s tabs will refresh shortly.</p>

    </div>
  </div>
</div>


<div class="modal fade" id="settings-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <h3><span class="fui-gear"></span>Pad Settings</h3>
  <ul>
    <li>
      <h4>Language</h4>
      <p>Warning: Changing the pad language will refresh the window for all participants.</p>
      <select class="selectpicker" id="language-select" name="language-select"><option value="c">C</option>
<option value="csharp">C#</option>
<option value="cpp">C++</option>
<option value="clojure">Clojure</option>
<option value="coffeescript">CoffeeScript</option>
<option value="go">Go</option>
<option value="haskell">Haskell</option>
<option selected="selected" value="java">Java</option>
<option value="javascript">JavaScript</option>
<option value="markdown">Markdown</option>
<option value="objc">Objective-C</option>
<option value="php">PHP</option>
<option value="perl">Perl</option>
<option value="python">Python</option>
<option value="ruby">Ruby</option>
<option value="scala">Scala</option></select>
    </li>
    <li>
      <h4>Tab &nbsp;Spacing</h4>
      <p>Control the number of spaces used for indentation.</p>
      <select class="selectpicker" id="tab-type-select" name="tab-type-select"><option selected="selected" value="2">2 Space Tabs</option>
<option value="4">4 Space Tabs</option>
<option value="8">8 Space Tabs</option></select>
    </li>
  </ul>

    </div>
  </div>
</div>


<div class="modal fade" id="create-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
    <div class="modal-body clearfix">
      <h4>Choose the language for your new pad:</h4>

      <form accept-charset="UTF-8" action="/" class="new_pad" id="new_pad" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
        <div class="clearfix">
            <ul>
              <li class="header">Interpreted</li>
                <li>
                  <input id="pad_language_coffeescript" name="pad[language]" type="radio" value="coffeescript" />
                  <label for="pad_language_coffeescript">CoffeeScript</label>
                </li>
                <li>
                  <input id="pad_language_javascript" name="pad[language]" type="radio" value="javascript" />
                  <label for="pad_language_javascript">JavaScript</label>
                </li>
                <li>
                  <input id="pad_language_perl" name="pad[language]" type="radio" value="perl" />
                  <label for="pad_language_perl">Perl</label>
                </li>
                <li>
                  <input id="pad_language_php" name="pad[language]" type="radio" value="php" />
                  <label for="pad_language_php">PHP</label>
                </li>
                <li>
                  <input id="pad_language_python" name="pad[language]" type="radio" value="python" />
                  <label for="pad_language_python">Python</label>
                </li>
                <li>
                  <input checked="checked" id="pad_language_ruby" name="pad[language]" type="radio" value="ruby" />
                  <label for="pad_language_ruby">Ruby</label>
                </li>
            </ul>
            <ul>
              <li class="header">Compiled</li>
                <li>
                  <input id="pad_language_c" name="pad[language]" type="radio" value="c" />
                  <label for="pad_language_c">C</label>
                </li>
                <li>
                  <input id="pad_language_clojure" name="pad[language]" type="radio" value="clojure" />
                  <label for="pad_language_clojure">Clojure</label>
                </li>
                <li>
                  <input id="pad_language_cpp" name="pad[language]" type="radio" value="cpp" />
                  <label for="pad_language_cpp">C++</label>
                </li>
                <li>
                  <input id="pad_language_csharp" name="pad[language]" type="radio" value="csharp" />
                  <label for="pad_language_csharp">C#</label>
                </li>
                <li>
                  <input id="pad_language_go" name="pad[language]" type="radio" value="go" />
                  <label for="pad_language_go">Go</label>
                </li>
                <li>
                  <input id="pad_language_haskell" name="pad[language]" type="radio" value="haskell" />
                  <label for="pad_language_haskell">Haskell</label>
                </li>
                <li>
                  <input id="pad_language_java" name="pad[language]" type="radio" value="java" />
                  <label for="pad_language_java">Java</label>
                </li>
                <li>
                  <input id="pad_language_objc" name="pad[language]" type="radio" value="objc" />
                  <label for="pad_language_objc">Objective-C</label>
                </li>
                <li>
                  <input id="pad_language_scala" name="pad[language]" type="radio" value="scala" />
                  <label for="pad_language_scala">Scala</label>
                </li>
            </ul>
            <ul>
              <li class="header">Documents</li>
                <li>
                  <input id="pad_language_markdown" name="pad[language]" type="radio" value="markdown" />
                  <label for="pad_language_markdown">Markdown</label>
                </li>
            </ul>
        </div>
        <p>
          <input class="btn btn-primary" name="commit" type="submit" value="Create Pad" /> or
          <input class="btn btn-primary" name="commit" type="submit" value="Launch Google Hangout" />
        </p>
</form>    </div>

    </div>
  </div>
</div>



  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
    <script src="//cdn.ravenjs.com/1.1.2/jquery,native/raven.min.js"></script>
    <script>
      Raven.config('https://4d747205c6ed435c889710eaead44e12@app.getsentry.com/10579', {
        includePaths: [
          /localhost/,
          /coderpad\.io/,
          /vincentwoo\.com/,
          /d146h09pbg0b1a\.cloudfront/
        ],
        ignoreUrls: [
          /graph\.facebook\.com/i,
          /connect\.facebook\.net\/en_US\/all\.js/i,
          /eatdifferent\.com\.woopra-ns\.com/i,
          /static\.woopra\.com\/js\/woopra\.js/i,
          /extensions\//i,
          /^chrome:\/\//i,
          /127\.0\.0\.1:4001\/isrunning/i,
          /webappstoolbarba\.texthelp\.com\//i,
          /metrics\.itunes\.apple\.com\.edgesuite\.net\//i
        ]
      }).install();
    </script>
  <script src="//d146h09pbg0b1a.cloudfront.net/assets/application-ac1fc5b18aff7c11b7c357930bb008e9.js"></script>
</body>
</html>
