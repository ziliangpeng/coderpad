<!DOCTYPE html>
<!-- CoderPad (c) 2013 Vincent Woo -->
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"beacon-2.newrelic.com","errorBeacon":"jserror.newrelic.com","licenseKey":"586aeabffa","applicationID":"2434573","transactionName":"cF5XTRNfXF9VQxkSVVdCFkoJX0c=","queueTime":8,"applicationTime":62,"ttGuid":"","agentToken":null,"agent":"js-agent.newrelic.com/nr-314.min.js"}</script>
<script type="text/javascript">window.NREUM||(NREUM={}),__nr_require=function a(b,c,d){function e(f){if(!c[f]){var g=c[f]={exports:{}};b[f][0].call(g.exports,function(a){var c=b[f][1][a];return e(c?c:a)},g,g.exports,a,b,c,d)}return c[f].exports}for(var f=0;f<d.length;f++)e(d[f]);return e}({"4O2Y62":[function(a,b){function c(a,b){var c=d[a];return c?c.apply(this,b):(e[a]||(e[a]=[]),void e[a].push(b))}var d={},e={};b.exports=c,c.queues=e,c.handlers=d},{}],handle:[function(a,b){b.exports=a("4O2Y62")},{}],YLUGVp:[function(a,b){function c(){var a=m.info=NREUM.info;if(a&&a.agent&&a.licenseKey&&a.applicationID){m.proto="https"===l.split(":")[0]||a.sslForHttp?"https://":"http://",g("mark",["onload",f()]);var b=i.createElement("script");b.src=m.proto+a.agent,i.body.appendChild(b)}}function d(){"complete"===i.readyState&&e()}function e(){g("mark",["domContent",f()])}function f(){return(new Date).getTime()}var g=a("handle"),h=window,i=h.document,j="addEventListener",k="attachEvent",l=(""+location).split("?")[0],m=b.exports={offset:f(),origin:l};i[j]?(i[j]("DOMContentLoaded",e,!1),h[j]("load",c,!1)):(i[k]("onreadystatechange",d),h[k]("onload",c)),g("mark",["firstbyte",f()])},{handle:"4O2Y62"}],loader:[function(a,b){b.exports=a("YLUGVp")},{}]},{},["YLUGVp"]);</script>
  <meta name="description"
    content="CoderPad is the best tool available for conducting programming phone screen interviews. Edit code and run it with your candidate, realtime in the browser.">
  <link rel="shortcut icon" href="//d146h09pbg0b1a.cloudfront.net/assets/coderpad_logo_32x32-4cb7162b76ccaa9584b63b603f47e139.png">

  <title>CoderPad - Python</title>

  <link href="//fonts.googleapis.com/css?family=Bitter:400,700|Lato:300,700" media="all" rel="stylesheet" />
  <link href="//d146h09pbg0b1a.cloudfront.net/assets/application-c992391beaa069692384c4b76e08bd1b.css" media="all" rel="stylesheet" />
  
  
</head>
<body class="pad">

  
  

  
<div id="overlay">
  <div>
      <p>
        <span>Welcome to CoderPad!</span><br>
        Identify yourself below, if you please.
      </p>
      <input id="name-prompt">
      <button id="go" class="btn btn-primary">
        Go!
      </button>
  </div>
</div>

<div id="header">

  <div id="header-wrapper">
      <button
        class="btn btn-primary tooltip-target"
        id="run"
        data-toggle="tooltip"
        title="Shortcut: ctrl + enter"
        data-placement="bottom"
        data-html="true"
      >
        Run
        <span class="fui-play"></span>
      </button>


    <a
      id="settings-toggle"
      href="#"
      data-toggle="modal"
      data-target="#settings-modal"
    >
      <span
        class="fui-gear tooltip-target"
        data-toggle="tooltip"
        data-placement="bottom"
        title="Pad settings"
      ></span>
    </a>

  </div>
</div>

<div id="workspace-wrap" class="pad">
  <div id="workspace" class="python">
    <div id="editor" class="pane">
      <span class="pane-label">Python Code</span>
      <div id="editor-widget" class="codemirror-container"></div>
    </div>
    <div id="vertical" class="resizer"></div>
    <div id="right-pane">
        <div id="console-wrap" class="pane full">
          <span class="pane-label">Console</span>
          <div id="console"></div>
        </div>
    </div>
  </div>
</div>

<div id="sidebar">
    <img alt="5dde501906b4898b284e8bde7b2bbd76" id="branded_logo" src="//d2t1avzf848e2j.cloudfront.net/uploads/domain/logo/5dde501906b4898b284e8bde7b2bbd76.png" />
  <ol id="users"></ol>

  <p>
    CoderPad is a collaborative code editor with real-time execution
     built straight into the browser.
  </p>
    <p>
      This pad also supports typing commands directly into the
      interactive shell on the right side of the screen.
    </p>
    <p><a href="https://plus.google.com/hangouts/_?gid=583721984460&amp;gd=https%3A%2F%2Fcoderpad.io%2F068926">Open Google Hangout</a></p>
  </p>
</div>




<script>
  window.lang     = 'python';
  window.pad      = '068926';
  window.username = null ||
    ('Guest ' + Math.floor(Math.random() * 1000));
  window.snippets = {"CirclesTouchingSolution":"class Solution {\r\n  public static class Circle {\r\n    private final double x;\r\n    private final double y;\r\n    private final double radius;\r\n    \r\n    public Circle(double x, double y, double radius) {\r\n      this.x = x;\r\n      this.y = y;\r\n      this.radius = radius;\r\n    }\r\n    \r\n    public double distanceBetweenRadius(Circle other) {\r\n      double distance = Math.sqrt(Math.pow(this.x - other.x, 2) +\r\n                                  Math.pow(this.y - other.y, 2)); \r\n      return distance;\r\n    }\r\n    \r\n    public boolean touches(Circle other) {\r\n      return this.distanceBetweenRadius(other) \u003C this.radius + other.radius;\r\n    }\r\n  }\r\n  \r\n  public static void main(String[] args) {\r\n    System.out.println(new Circle(1.0, 1.0, 2).touches(new Circle(3.0, 3.0, 1.0)));   \r\n  }\r\n}\r\n","Overlapping Circles":"class Solution {  \r\n  public static void main(String[] args) {\r\n    /*\r\n    if(!new Circle(1.0, 1.0, 2.0).touches(new Circle(3.0, 3.0, 1.0))) {\r\n      System.out.println(\"Hmm, a circle at 1.0, 1.0 with radius 2.0 should touch one at 3.0, 3.0 with radius 1.0, but your function returned false :(\");\r\n    }\r\n    \r\n    if(new Circle(-11.0, 3.0, 4.0).touches(new Circle(3.0, 8.0, 1.0))) {\r\n      System.out.println(\"Hmm, a circle at -11.0, 3.0 with radius 4.0 should NOT touch one at 3.0, 8.0 with radius 1.0, but your function returned true :(\");\r\n    }\r\n    */\r\n  }\r\n}\r\n\r\nclass Circle {        \r\n  public boolean touches(Circle other) {\r\n    return false;\r\n  }\r\n}","BlindMole":"class Solution {\r\n  public static void main(String[] args) {\r\n    Maze maze1 = new Maze(\"The Crooked Depths\", \r\n      new int[][] {\r\n        {1, 1, 0, 0, 2},\r\n        {1, 1, 0, 1, 0},\r\n        {0, 0, 0, 0, 0},\r\n        {0, 1, 0, 0, 0},\r\n        {0, 1, 1, 1, 1}\r\n      }, new MazeSolver());\r\n    Maze maze2 = new Maze(\"The Winding Halls\", new int[][] {\r\n      {1, 1, 0, 0, 0},\r\n      {1, 1, 0, 1, 1},\r\n      {0, 0, 0, 0, 0},\r\n      {0, 1, 0, 1, 1},\r\n      {0, 1, 0, 0, 2}\r\n    }, new MazeSolver());\r\n    Maze maze3 = new Maze(\"Mines of Moria\", new int[][] {\r\n      {2, 1, 1, 0, 0},\r\n      {0, 1, 0, 1, 0},\r\n      {0, 0, 0, 1, 0},\r\n      {1, 1, 0, 0, 0},\r\n      {0, 0, 0, 1, 1}\r\n    }, new MazeSolver());\r\n  \r\n    maze1.tryToSolve();\r\n    maze2.tryToSolve();\r\n    maze3.tryToSolve();\r\n  }\r\n}\r\n\r\n\r\nclass MazeSolver {\r\n  // Maybe a maze solver should have some \"state\"?\r\n  \r\n  public MazeSolver() {\r\n    // Currently, this doesn't initialize any values. Hmmmm.....\r\n  }\r\n  \r\n  public int getFirstMove() {\r\n    return Maze.UP;\r\n  }\r\n    \r\n  public int getSecondMove() {\r\n    return Maze.DOWN;\r\n  }\r\n\r\n  public int getThirdMove() {\r\n    return Maze.LEFT;\r\n  }\r\n\r\n  public int getFourthMove() {\r\n    return Maze.UP;\r\n  }\r\n  \r\n  public int getFifthMove() {\r\n    return Maze.DOWN;\r\n  }\r\n \r\n  public int getSixthMove() {\r\n    return Maze.DOWN;\r\n  }\r\n    \r\n  public int getSeventhMove() {\r\n    return Maze.RIGHT;\r\n  }\r\n    \r\n  public int getEigthMove() {\r\n    return Maze.UP;\r\n  }\r\n}\r\n\r\nclass Maze {\r\n  public static final int WALL = 1;\r\n  public static final int END = 2;\r\n  public static final int MAX_ITERATIONS = (int) Math.pow(4, 8);\r\n  public static final int MAZE_WIDTH = 5;\r\n  public static final int MAZE_HEIGHT = 5;\r\n  public static final int UP = 0;\r\n  public static final int RIGHT = 1;\r\n  public static final int DOWN = 2;\r\n  public static final int LEFT = 3;\r\n  \r\n  private final int[][] maze;\r\n  private final MazeSolver mazeSolver;\r\n  private final String name;\r\n \r\n  public Maze(String name, int[][] maze, MazeSolver mazeSolver) {\r\n    this.name = name;\r\n    this.maze = maze;\r\n    this.mazeSolver = mazeSolver;\r\n  }\r\n \r\n  public void tryToSolve() {\r\n    Mole mole = new Mole();\r\n    mole.y = MAZE_HEIGHT - 1;\r\n    for(int iteration = 0; iteration \u003C MAX_ITERATIONS; ++iteration) {\r\n      int firstMove = mazeSolver.getFirstMove();\r\n      int secondMove = mazeSolver.getSecondMove();\r\n      int thirdMove = mazeSolver.getThirdMove();\r\n      int fourthMove = mazeSolver.getFourthMove();\r\n      int fifthMove = mazeSolver.getFifthMove();\r\n      int sixthMove = mazeSolver.getSixthMove();\r\n      int seventhMove = mazeSolver.getSeventhMove();\r\n      int eigthMove = mazeSolver.getEigthMove();\r\n      \r\n      moveMole(mole, firstMove);\r\n      moveMole(mole, secondMove);\r\n      moveMole(mole, thirdMove);\r\n      moveMole(mole, fourthMove);\r\n      moveMole(mole, fifthMove);\r\n      moveMole(mole, sixthMove);\r\n      moveMole(mole, seventhMove);\r\n      moveMole(mole, eigthMove);\r\n      \r\n      if(iteration % 5000 == 0) {\r\n        System.out.println(\"Blind mole is searching... hmmm...\");\r\n      }\r\n      \r\n      if(maze[mole.y][mole.x] == END) {\r\n        System.out.println(String.format(\"Yay!  Your blind mole totes made it out of %s in %s move(s)!\", name, iteration + 1));\r\n        String pathDescription = pathDescription(firstMove, secondMove, thirdMove, fourthMove, fifthMove, sixthMove, seventhMove, eigthMove);\r\n        System.out.println(String.format(\"She found the way out by going %s\", pathDescription));\r\n        return;\r\n      }\r\n    }\r\n    \r\n    System.out.println(String.format(\"NUUUUU! Blind mole got stuck inside %s and gave up after %s tries!\", name, MAX_ITERATIONS));\r\n  }\r\n  \r\n  \r\n               \r\n  private String pathDescription(int... moves) {\r\n    return \"\";\r\n  }\r\n  \r\n  private void moveMole(Mole mole, int direction) {\r\n    if(direction \u003C 0 || direction \u003E 3) {\r\n      System.out.println(\"Blind move is confused!  He tried to move direction %s, \" +\r\n                         \"but he only knows\\n\" +\r\n                         \"  0 =\u003E Maze.UP\\n\" +\r\n                         \"  1 =\u003E Maze.RIGHT\\n\" +\r\n                         \"  2 =\u003E Maze.DOWN\\n\" +\r\n                         \"  3 =\u003E Maze.LEFT\\n\");\r\n      return;\r\n    }\r\n    int newX = mole.x + (direction % 2) * (-direction + 2);\r\n    int newY = mole.y + ((direction + 1) % 2) * (direction - 1);\r\n    \r\n    if(newX \u003C 0 || newX \u003E= MAZE_WIDTH || newY \u003C 0 || newY \u003E= MAZE_HEIGHT) {\r\n      return; // bump!\r\n    }\r\n    \r\n    if(maze[newY][newX] == WALL) {\r\n      return;\r\n    }\r\n    \r\n    mole.x = newX;\r\n    mole.y = newY;\r\n  }\r\n}\r\n\r\nclass Mole {\r\n  public int x = 0;\r\n  public int y = 0;\r\n}\r\n","BlindMole2":"class Solution {\r\n  public static void main(String[] args) {\r\n    Maze maze1 = new Maze(\"The Crooked Depths\", \r\n      new int[][] {\r\n        {1, 1, 0, 0, 2},\r\n        {1, 1, 0, 1, 0},\r\n        {0, 0, 0, 0, 0},\r\n        {0, 1, 0, 0, 0},\r\n        {0, 1, 1, 1, 1}\r\n      }, new MazeSolver());\r\n    Maze maze2 = new Maze(\"The Winding Halls\", new int[][] {\r\n      {1, 1, 0, 0, 0},\r\n      {1, 1, 0, 1, 1},\r\n      {0, 0, 0, 0, 0},\r\n      {0, 1, 0, 1, 1},\r\n      {0, 1, 0, 0, 2}\r\n    }, new MazeSolver());\r\n    Maze maze3 = new Maze(\"Mines of Moria\", new int[][] {\r\n      {2, 1, 1, 0, 0},\r\n      {0, 1, 0, 1, 0},\r\n      {0, 0, 0, 1, 0},\r\n      {1, 1, 0, 0, 0},\r\n      {0, 0, 0, 1, 1}\r\n    }, new MazeSolver());\r\n  \r\n    maze1.tryToSolve();\r\n    maze2.tryToSolve();\r\n    maze3.tryToSolve();\r\n  }\r\n}\r\n\r\n\r\nclass MazeSolver {\r\n  // Maybe a maze solver should have some \"state\"?\r\n  \r\n  public MazeSolver() {\r\n    // Currently, this doesn't initialize any values. Hmmmm.....\r\n  }\r\n  \r\n  public int getFirstMove() {\r\n    return Maze.UP;\r\n  }\r\n    \r\n  public int getSecondMove() {\r\n    return Maze.DOWN;\r\n  }\r\n\r\n  public int getThirdMove() {\r\n    return Maze.LEFT;\r\n  }\r\n\r\n  public int getFourthMove() {\r\n    return Maze.UP;\r\n  }\r\n  \r\n  public int getFifthMove() {\r\n    return Maze.DOWN;\r\n  }\r\n \r\n  public int getSixthMove() {\r\n    return Maze.DOWN;\r\n  }\r\n    \r\n  public int getSeventhMove() {\r\n    return Maze.RIGHT;\r\n  }\r\n    \r\n  public int getEigthMove() {\r\n    return Maze.UP;\r\n  }\r\n}\r\n\r\nclass Maze {\r\n  public static final int WALL = 1;\r\n  public static final int END = 2;\r\n  public static final int MAX_ITERATIONS = (int) Math.pow(4, 8);\r\n  public static final int MAZE_WIDTH = 5;\r\n  public static final int MAZE_HEIGHT = 5;\r\n  \r\n  private final int[][] maze;\r\n  private final MazeSolver mazeSolver;\r\n  private final String name;\r\n \r\n  public Maze(String name, int[][] maze, MazeSolver mazeSolver) {\r\n    this.name = name;\r\n    this.maze = maze;\r\n    this.mazeSolver = mazeSolver;\r\n  }\r\n \r\n  public void tryToSolve() {\r\n    Mole mole = new Mole();\r\n    mole.y = MAZE_HEIGHT - 1;\r\n    for(int iteration = 0; iteration \u003C MAX_ITERATIONS; ++iteration) {\r\n      int firstMove = mazeSolver.getFirstMove();\r\n      int secondMove = mazeSolver.getSecondMove();\r\n      int thirdMove = mazeSolver.getThirdMove();\r\n      int fourthMove = mazeSolver.getFourthMove();\r\n      int fifthMove = mazeSolver.getFifthMove();\r\n      int sixthMove = mazeSolver.getSixthMove();\r\n      int seventhMove = mazeSolver.getSeventhMove();\r\n      int eigthMove = mazeSolver.getEigthMove();\r\n      \r\n      moveMole(mole, firstMove);\r\n      moveMole(mole, secondMove);\r\n      moveMole(mole, thirdMove);\r\n      moveMole(mole, fourthMove);\r\n      moveMole(mole, fifthMove);\r\n      moveMole(mole, sixthMove);\r\n      moveMole(mole, seventhMove);\r\n      moveMole(mole, eigthMove);\r\n      \r\n      if(iteration % 5000 == 0) {\r\n        System.out.println(\"Blind mole is searching... hmmm...\");\r\n      }\r\n      \r\n      if(maze[mole.y][mole.x] == END) {\r\n        System.out.println(String.format(\"Yay!  Your blind mole totes made it out of %s in %s move(s)!\", name, iteration + 1));\r\n        String pathDescription = pathDescription(firstMove, secondMove, thirdMove, fourthMove, fifthMove, sixthMove, seventhMove, eigthMove);\r\n        System.out.println(String.format(\"She found the way out by going %s\", pathDescription));\r\n        return;\r\n      }\r\n    }\r\n    \r\n    System.out.println(String.format(\"NUUUUU! Blind mole got stuck inside %s and gave up after %s tries!\", name, MAX_ITERATIONS));\r\n  }\r\n  \r\n  \r\n               \r\n  private String pathDescription(int... moves) {\r\n    return \"\";\r\n  }\r\n  \r\n  private void moveMole(Mole mole, int direction) {\r\n    if(direction \u003C 0 || direction \u003E 3) {\r\n      System.out.println(\"Blind move is confused!  He tried to move direction %s, \" +\r\n                         \"but he only knows\\n\" +\r\n                         \"  0 =\u003E up\\n\" +\r\n                         \"  1 =\u003E right\\n\" +\r\n                         \"  2 =\u003E down\\n\" +\r\n                         \"  3 =\u003E left\\n\");\r\n      return;\r\n    }\r\n    int newX = mole.x + (direction % 2) * (-direction + 2);\r\n    int newY = mole.y + ((direction + 1) % 2) * (direction - 1);\r\n    \r\n    if(newX \u003C 0 || newX \u003E= MAZE_WIDTH || newY \u003C 0 || newY \u003E= MAZE_HEIGHT) {\r\n      return; // bump!\r\n    }\r\n    \r\n    if(maze[newY][newX] == WALL) {\r\n      return;\r\n    }\r\n    \r\n    mole.x = newX;\r\n    mole.y = newY;\r\n  }\r\n}\r\n\r\nclass Mole {\r\n  public int x = 0;\r\n  public int y = 0;\r\n}\r\n","Mad Lib":"class Solution {  \r\n  public static void main(String[] args) {\r\n    /*\r\n    Madlib madlib1 = new Madlib(\r\n      \"Dear School Nurse: \\n\" +\r\n      \"[silly-word-one] [last-name] will not be attending \" +\r\n      \"school today.  He/she has come down with a case of \" +\r\n      \"[illness] and has horrible [noun-plural] and a/an \" +\r\n      \"[adjective-one] fever.  We have made an appointment with the \" +\r\n      \"[adjective-two] Dr. [silly-word-two], who studied for many years \" +\r\n      \"in [place] and has [number] degrees in pediatrics.  He will \" +\r\n      \"send you all the information you need.  Thank you! \\n\" +\r\n      \"Sincerely,\\n\" +\r\n      \"Mrs. [adjective-three]\"\r\n    );\r\n    \r\n    madlib1.setSillyWordOne(\"Crustaceous\");\r\n    System.out.println(madlib1.fillInWords());\r\n    */\r\n  }\r\n}\r\n\r\nclass Madlib {\r\n}","Blind Mole Solution":"class Solution {\r\n  public static void main(String[] args) {\r\n    Maze maze1 = new Maze(\"The Crooked Depths\", \r\n      new int[][] {\r\n        {1, 1, 0, 0, 2},\r\n        {1, 1, 0, 1, 0},\r\n        {0, 0, 0, 0, 0},\r\n        {0, 1, 0, 0, 0},\r\n        {0, 1, 1, 1, 1}\r\n      }, new MazeSolver());\r\n    Maze maze2 = new Maze(\"The Winding Halls\", new int[][] {\r\n      {1, 1, 0, 0, 0},\r\n      {1, 1, 0, 1, 1},\r\n      {0, 0, 0, 0, 0},\r\n      {0, 1, 0, 1, 1},\r\n      {0, 1, 0, 0, 2}\r\n    }, new MazeSolver());\r\n    Maze maze3 = new Maze(\"Mines of Moria\", new int[][] {\r\n      {2, 1, 1, 0, 0},\r\n      {0, 1, 0, 1, 0},\r\n      {0, 0, 0, 1, 0},\r\n      {1, 1, 0, 0, 0},\r\n      {0, 0, 0, 1, 1}\r\n    }, new MazeSolver());\r\n  \r\n    maze1.tryToSolve();\r\n    maze2.tryToSolve();\r\n    maze3.tryToSolve();\r\n  }\r\n}\r\n\r\n/*\r\n  0 - up\r\n  1 - right\r\n  2 - down\r\n  3 - left\r\n*/\r\n\r\nclass MazeSolver {\r\n  private int numMovesSoFar;\r\n  // Maybe a maze solver should have some \"state\"?\r\n  \r\n  public MazeSolver() {\r\n    numMovesSoFar = 0;\r\n    // Currently, this doesn't initialize any values. Hmmmm.....\r\n  }\r\n  \r\n  public int getFirstMove() {\r\n    numMovesSoFar = numMovesSoFar + 1;\r\n    return numMovesSoFar % 4; \r\n  }\r\n    \r\n  public int getSecondMove() {\r\n    return numMovesSoFar / 4 % 4;\r\n  }\r\n\r\n  public int getThirdMove() {\r\n    return numMovesSoFar / 16 % 4;\r\n  }\r\n\r\n  public int getFourthMove() {\r\n    return numMovesSoFar / 64 % 4;\r\n  }\r\n  \r\n  public int getFifthMove() {\r\n    return numMovesSoFar / 256 % 4;\r\n  }\r\n \r\n  public int getSixthMove() {\r\n    return numMovesSoFar / 1024 % 4;\r\n  }\r\n    \r\n  public int getSeventhMove() {\r\n    return numMovesSoFar / 4096 % 4;\r\n  }\r\n    \r\n  public int getEigthMove() {\r\n    return numMovesSoFar / 16384 % 4;\r\n  }\r\n}\r\n\r\nclass Maze {\r\n  public static final int WALL = 1;\r\n  public static final int END = 2;\r\n  public static final int MAX_ITERATIONS = (int) Math.pow(4, 8);\r\n  public static final int MAZE_WIDTH = 5;\r\n  public static final int MAZE_HEIGHT = 5;\r\n  \r\n  private final int[][] maze;\r\n  private final MazeSolver mazeSolver;\r\n  private final String name;\r\n \r\n  public Maze(String name, int[][] maze, MazeSolver mazeSolver) {\r\n    this.name = name;\r\n    this.maze = maze;\r\n    this.mazeSolver = mazeSolver;\r\n  }\r\n \r\n  public void tryToSolve() {\r\n    for(int iteration = 0; iteration \u003C MAX_ITERATIONS; ++iteration) {\r\n      Mole mole = new Mole();\r\n      mole.y = MAZE_HEIGHT - 1;\r\n      \r\n      int firstMove = mazeSolver.getFirstMove();\r\n      int secondMove = mazeSolver.getSecondMove();\r\n      int thirdMove = mazeSolver.getThirdMove();\r\n      int fourthMove = mazeSolver.getFourthMove();\r\n      int fifthMove = mazeSolver.getFifthMove();\r\n      int sixthMove = mazeSolver.getSixthMove();\r\n      int seventhMove = mazeSolver.getSeventhMove();\r\n      int eigthMove = mazeSolver.getEigthMove();\r\n      \r\n      moveMole(mole, firstMove);\r\n      moveMole(mole, secondMove);\r\n      moveMole(mole, thirdMove);\r\n      moveMole(mole, fourthMove);\r\n      moveMole(mole, fifthMove);\r\n      moveMole(mole, sixthMove);\r\n      moveMole(mole, seventhMove);\r\n      moveMole(mole, eigthMove);\r\n      \r\n      if(iteration % 5000 == 0) {\r\n        System.out.println(\"Blind mole is searching... hmmm...\");\r\n      }\r\n      \r\n      if(maze[mole.y][mole.x] == END) {\r\n        System.out.println(String.format(\"Yay!  Your blind mole totes made it out of %s in %s tries!\", name, iteration + 1));\r\n        String pathDescription = pathDescription(firstMove, secondMove, thirdMove, fourthMove, fifthMove, sixthMove, seventhMove, eigthMove);\r\n        System.out.println(String.format(\"She found the way out by going %s\", pathDescription));\r\n        return;\r\n      }\r\n    }\r\n    \r\n    System.out.println(String.format(\"NUUUUU! Blind mole got stuck inside %s and gave up after %s tries!\", name, MAX_ITERATIONS));\r\n  }\r\n  \r\n  \r\n               \r\n  private String pathDescription(int... moves) {\r\n    String result = \"\";\r\n    for(int move : moves) {\r\n      if(move == 0) {\r\n        result += \"UP \";\r\n      }\r\n      if(move == 1) {\r\n        result += \"RIGHT \";\r\n      }\r\n      if(move == 2) {\r\n        result += \"DOWN \";\r\n      }\r\n      if(move == 3) {\r\n        result += \"LEFT \";\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  private void moveMole(Mole mole, int direction) {\r\n    if(direction \u003C 0 || direction \u003E 3) {\r\n      System.out.println(\"Blind move is confused!  He tried to move direction %s, \" +\r\n                         \"but he only knows\\n\" +\r\n                         \"  0 =\u003E up\\n\" +\r\n                         \"  1 =\u003E right\\n\" +\r\n                         \"  2 =\u003E down\\n\" +\r\n                         \"  3 =\u003E left\\n\");\r\n      return;\r\n    }\r\n    int newX = mole.x + (direction % 2) * (-direction + 2);\r\n    int newY = mole.y + ((direction + 1) % 2) * (direction - 1);\r\n    \r\n    if(newX \u003C 0 || newX \u003E= MAZE_WIDTH || newY \u003C 0 || newY \u003E= MAZE_HEIGHT) {\r\n      return; // bump!\r\n    }\r\n    \r\n    if(maze[newY][newX] == WALL) {\r\n      return;\r\n    }\r\n    \r\n    mole.x = newX;\r\n    mole.y = newY;\r\n  }\r\n}\r\n\r\nclass Mole {\r\n  public int x = 0;\r\n  public int y = 0;\r\n}\r\n","Blind Mole":"class Solution {\r\n  public static void main(String[] args) {\r\n    Maze maze1 = new Maze(\"The Crooked Depths\", \r\n      new int[][] {\r\n        {1, 1, 0, 0, 2},\r\n        {1, 1, 0, 1, 0},\r\n        {0, 0, 0, 0, 0},\r\n        {0, 1, 0, 0, 0},\r\n        {0, 1, 1, 1, 1}\r\n      }, new MazeSolver());\r\n    Maze maze2 = new Maze(\"The Winding Halls\", new int[][] {\r\n      {1, 1, 0, 0, 0},\r\n      {1, 1, 0, 1, 1},\r\n      {0, 0, 0, 0, 0},\r\n      {0, 1, 0, 1, 1},\r\n      {0, 1, 0, 0, 2}\r\n    }, new MazeSolver());\r\n    Maze maze3 = new Maze(\"Mines of Moria\", new int[][] {\r\n      {2, 1, 1, 0, 0},\r\n      {0, 1, 0, 1, 0},\r\n      {0, 0, 0, 1, 0},\r\n      {1, 1, 0, 0, 0},\r\n      {0, 0, 0, 1, 1}\r\n    }, new MazeSolver());\r\n  \r\n    maze1.tryToSolve();\r\n    maze2.tryToSolve();\r\n    maze3.tryToSolve();\r\n  }\r\n}\r\n\r\n/*\r\n  0 - up\r\n  1 - right\r\n  2 - down\r\n  3 - left\r\n*/\r\n\r\nclass MazeSolver {\r\n  // Maybe a maze solver should have some \"state\"?\r\n  \r\n  public MazeSolver() {\r\n    // Currently, this doesn't initialize any values. Hmmmm.....\r\n  }\r\n  \r\n  public int getFirstMove() {\r\n    return 0;\r\n  }\r\n    \r\n  public int getSecondMove() {\r\n    return 0;\r\n  }\r\n\r\n  public int getThirdMove() {\r\n    return 1;\r\n  }\r\n\r\n  public int getFourthMove() {\r\n    return 1;\r\n  }\r\n  \r\n  public int getFifthMove() {\r\n    return 1;\r\n  }\r\n \r\n  public int getSixthMove() {\r\n    return 1;\r\n  }\r\n    \r\n  public int getSeventhMove() {\r\n    return 0;\r\n  }\r\n    \r\n  public int getEigthMove() {\r\n    return 0;\r\n  }\r\n}\r\n\r\nclass Maze {\r\n  public static final int WALL = 1;\r\n  public static final int END = 2;\r\n  public static final int MAX_ITERATIONS = (int) Math.pow(4, 8);\r\n  public static final int MAZE_WIDTH = 5;\r\n  public static final int MAZE_HEIGHT = 5;\r\n  \r\n  private final int[][] maze;\r\n  private final MazeSolver mazeSolver;\r\n  private final String name;\r\n \r\n  public Maze(String name, int[][] maze, MazeSolver mazeSolver) {\r\n    this.name = name;\r\n    this.maze = maze;\r\n    this.mazeSolver = mazeSolver;\r\n  }\r\n \r\n  public void tryToSolve() {\r\n    for(int iteration = 0; iteration \u003C MAX_ITERATIONS; ++iteration) {\r\n      Mole mole = new Mole();\r\n      mole.y = MAZE_HEIGHT - 1;\r\n      \r\n      int firstMove = mazeSolver.getFirstMove();\r\n      int secondMove = mazeSolver.getSecondMove();\r\n      int thirdMove = mazeSolver.getThirdMove();\r\n      int fourthMove = mazeSolver.getFourthMove();\r\n      int fifthMove = mazeSolver.getFifthMove();\r\n      int sixthMove = mazeSolver.getSixthMove();\r\n      int seventhMove = mazeSolver.getSeventhMove();\r\n      int eigthMove = mazeSolver.getEigthMove();\r\n      \r\n      moveMole(mole, firstMove);\r\n      moveMole(mole, secondMove);\r\n      moveMole(mole, thirdMove);\r\n      moveMole(mole, fourthMove);\r\n      moveMole(mole, fifthMove);\r\n      moveMole(mole, sixthMove);\r\n      moveMole(mole, seventhMove);\r\n      moveMole(mole, eigthMove);\r\n      \r\n      if(iteration % 5000 == 0) {\r\n        System.out.println(\"Blind mole is searching... hmmm...\");\r\n      }\r\n      \r\n      if(maze[mole.y][mole.x] == END) {\r\n        System.out.println(String.format(\"Yay!  Your blind mole totes made it out of %s in %s tries!\", name, iteration + 1));\r\n        String pathDescription = pathDescription(firstMove, secondMove, thirdMove, fourthMove, fifthMove, sixthMove, seventhMove, eigthMove);\r\n        System.out.println(String.format(\"She found the way out by going %s\", pathDescription));\r\n        return;\r\n      }\r\n    }\r\n    \r\n    System.out.println(String.format(\"NUUUUU! Blind mole got stuck inside %s and gave up after %s tries!\", name, MAX_ITERATIONS));\r\n  }\r\n  \r\n  \r\n               \r\n  private String pathDescription(int... moves) {\r\n    String result = \"\";\r\n    for(int move : moves) {\r\n      if(move == 0) {\r\n        result += \"UP \";\r\n      }\r\n      if(move == 1) {\r\n        result += \"RIGHT \";\r\n      }\r\n      if(move == 2) {\r\n        result += \"DOWN \";\r\n      }\r\n      if(move == 3) {\r\n        result += \"LEFT \";\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n  \r\n  private void moveMole(Mole mole, int direction) {\r\n    if(direction \u003C 0 || direction \u003E 3) {\r\n      System.out.println(\"Blind move is confused!  He tried to move direction %s, \" +\r\n                         \"but he only knows\\n\" +\r\n                         \"  0 =\u003E up\\n\" +\r\n                         \"  1 =\u003E right\\n\" +\r\n                         \"  2 =\u003E down\\n\" +\r\n                         \"  3 =\u003E left\\n\");\r\n      return;\r\n    }\r\n    int newX = mole.x + (direction % 2) * (-direction + 2);\r\n    int newY = mole.y + ((direction + 1) % 2) * (direction - 1);\r\n    \r\n    if(newX \u003C 0 || newX \u003E= MAZE_WIDTH || newY \u003C 0 || newY \u003E= MAZE_HEIGHT) {\r\n      return; // bump!\r\n    }\r\n    \r\n    if(maze[newY][newX] == WALL) {\r\n      return;\r\n    }\r\n    \r\n    mole.x = newX;\r\n    mole.y = newY;\r\n  }\r\n}\r\n\r\nclass Mole {\r\n  public int x = 0;\r\n  public int y = 0;\r\n}\r\n"}
</script>
<script src="https://cdn.firebase.com/v0/firebase.js"></script>


  
  
<div class="modal fade" id="switching-language-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <p>The pad's language is switching to: <span></span>&hellip;</p>
  <p>Everyone&rsquo;s tabs will refresh shortly.</p>

    </div>
  </div>
</div>


<div class="modal fade" id="settings-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
  <h3><span class="fui-gear"></span>Pad Settings</h3>
  <ul>
    <li>
      <h4>Language</h4>
      <p>Warning: Changing the pad language will refresh the window for all participants.</p>
      <select class="selectpicker" id="language-select" name="language-select"><option value="c">C</option>
<option value="csharp">C#</option>
<option value="cpp">C++</option>
<option value="clojure">Clojure</option>
<option value="coffeescript">CoffeeScript</option>
<option value="go">Go</option>
<option value="haskell">Haskell</option>
<option value="java">Java</option>
<option value="javascript">JavaScript</option>
<option value="markdown">Markdown</option>
<option value="objc">Objective-C</option>
<option value="php">PHP</option>
<option value="perl">Perl</option>
<option selected="selected" value="python">Python</option>
<option value="ruby">Ruby</option>
<option value="scala">Scala</option></select>
    </li>
    <li>
      <h4>Tab &nbsp;Spacing</h4>
      <p>Control the number of spaces used for indentation.</p>
      <select class="selectpicker" id="tab-type-select" name="tab-type-select"><option selected="selected" value="2">2 Space Tabs</option>
<option value="4">4 Space Tabs</option>
<option value="8">8 Space Tabs</option></select>
    </li>
  </ul>

    </div>
  </div>
</div>


<div class="modal fade" id="create-modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      
    <div class="modal-body clearfix">
      <h4>Choose the language for your new pad:</h4>

      <form accept-charset="UTF-8" action="/" class="new_pad" id="new_pad" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
        <div class="clearfix">
            <ul>
              <li class="header">Interpreted</li>
                <li>
                  <input id="pad_language_coffeescript" name="pad[language]" type="radio" value="coffeescript" />
                  <label for="pad_language_coffeescript">CoffeeScript</label>
                </li>
                <li>
                  <input id="pad_language_javascript" name="pad[language]" type="radio" value="javascript" />
                  <label for="pad_language_javascript">JavaScript</label>
                </li>
                <li>
                  <input id="pad_language_perl" name="pad[language]" type="radio" value="perl" />
                  <label for="pad_language_perl">Perl</label>
                </li>
                <li>
                  <input id="pad_language_php" name="pad[language]" type="radio" value="php" />
                  <label for="pad_language_php">PHP</label>
                </li>
                <li>
                  <input id="pad_language_python" name="pad[language]" type="radio" value="python" />
                  <label for="pad_language_python">Python</label>
                </li>
                <li>
                  <input checked="checked" id="pad_language_ruby" name="pad[language]" type="radio" value="ruby" />
                  <label for="pad_language_ruby">Ruby</label>
                </li>
            </ul>
            <ul>
              <li class="header">Compiled</li>
                <li>
                  <input id="pad_language_c" name="pad[language]" type="radio" value="c" />
                  <label for="pad_language_c">C</label>
                </li>
                <li>
                  <input id="pad_language_clojure" name="pad[language]" type="radio" value="clojure" />
                  <label for="pad_language_clojure">Clojure</label>
                </li>
                <li>
                  <input id="pad_language_cpp" name="pad[language]" type="radio" value="cpp" />
                  <label for="pad_language_cpp">C++</label>
                </li>
                <li>
                  <input id="pad_language_csharp" name="pad[language]" type="radio" value="csharp" />
                  <label for="pad_language_csharp">C#</label>
                </li>
                <li>
                  <input id="pad_language_go" name="pad[language]" type="radio" value="go" />
                  <label for="pad_language_go">Go</label>
                </li>
                <li>
                  <input id="pad_language_haskell" name="pad[language]" type="radio" value="haskell" />
                  <label for="pad_language_haskell">Haskell</label>
                </li>
                <li>
                  <input id="pad_language_java" name="pad[language]" type="radio" value="java" />
                  <label for="pad_language_java">Java</label>
                </li>
                <li>
                  <input id="pad_language_objc" name="pad[language]" type="radio" value="objc" />
                  <label for="pad_language_objc">Objective-C</label>
                </li>
                <li>
                  <input id="pad_language_scala" name="pad[language]" type="radio" value="scala" />
                  <label for="pad_language_scala">Scala</label>
                </li>
            </ul>
            <ul>
              <li class="header">Documents</li>
                <li>
                  <input id="pad_language_markdown" name="pad[language]" type="radio" value="markdown" />
                  <label for="pad_language_markdown">Markdown</label>
                </li>
            </ul>
        </div>
        <p>
          <input class="btn btn-primary" name="commit" type="submit" value="Create Pad" /> or
          <input class="btn btn-primary" name="commit" type="submit" value="Launch Google Hangout" />
        </p>
</form>    </div>

    </div>
  </div>
</div>



  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min.js"></script>
    <script src="//cdn.ravenjs.com/1.1.2/jquery,native/raven.min.js"></script>
    <script>
      Raven.config('https://4d747205c6ed435c889710eaead44e12@app.getsentry.com/10579', {
        includePaths: [
          /localhost/,
          /coderpad\.io/,
          /vincentwoo\.com/,
          /d146h09pbg0b1a\.cloudfront/
        ],
        ignoreUrls: [
          /graph\.facebook\.com/i,
          /connect\.facebook\.net\/en_US\/all\.js/i,
          /eatdifferent\.com\.woopra-ns\.com/i,
          /static\.woopra\.com\/js\/woopra\.js/i,
          /extensions\//i,
          /^chrome:\/\//i,
          /127\.0\.0\.1:4001\/isrunning/i,
          /webappstoolbarba\.texthelp\.com\//i,
          /metrics\.itunes\.apple\.com\.edgesuite\.net\//i
        ]
      }).install();
    </script>
  <script src="//d146h09pbg0b1a.cloudfront.net/assets/application-ac1fc5b18aff7c11b7c357930bb008e9.js"></script>
</body>
</html>
